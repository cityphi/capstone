function solved = forceSolver(forces, reactions, scenario)
%FORCESOLVER is a tool to find reaction forces with known input forces
%   sovled = forceSolver( forces, unknown) reaction forces
%   Forces is [ locX locY locZ Fx Fy Fz Mx My Mz ] 
%   Unkown Forces is same format but the forces and moments correspond to
%   their ability to resist
%   Solved is [ locX locY locZ Fx Fy Fz Mx My Mz ]

if ~exist('scenario','var'), scenario=0; end

% setting up useful values used
numReactions = size(reactions, 1);
numForces    = 6; % constant for the number of forces (Fxyz and Mxyz)
offset       = 3; % number of coordinates (xyz) used to offset matrices

% intermediate array that holds the information for the 6 equations
solver = equationBuilder(reactions, forces, 1, scenario);

% simplify the solver array and try to solve it
zeroForces = all(solver == 0);
removedSolver = solver(:, ~zeroForces);
reducedSolver = rref(removedSolver);

% check if the matrix could solve
unsolveable = 0;
for i = 1:numForces
    if sum(reducedSolver(i, 1:end-1) ~= 0) > 1
        unsolveable = 1;
    end
end

% if the program solved - convert from rref format to output format
solved = zeros(numReactions, 9); % output
k = 1;
if unsolveable ~= 1
    % set the forces
    for i = 1:numReactions
        for j = 1:numForces
            if zeroForces((i-1)*numForces + j) == 0
                solved(i, j+offset) = reducedSolver(k, end);
                k = k + 1;
            end
        end
    end
    
    % set the locations
    for i = 1:numReactions
        solved(i, 1:3) = reactions(i, 1:3);
    end 
    
else
    disp('--The matrix could not be solved')
end
end

%--------------------------------------------------
%   EQUATION BUILDER
%--------------------------------------------------

function [ sysEquations ] = equationBuilder(reactions, forces, related, ...
    scenario)
%EQUATIONBUILDER Makes a system of euqations
%   Takes the reactions and forces of the system to make the system of
%   equations of the system. Takes a related bool for cases where
%   information about forces that are the same are being passed in
%   reactions array

% constants used in main to make it easier to understand
numReactions = size(reactions, 1);
numForces    = 6;

% random 3D point to take the moments about
about = reactions(1, 1:3);

forces(:, 1:3) = bsxfun(@minus, forces(:, 1:3), -about(1:3));
totalR = transp(forces(:, 1:3));
totalF = transp(forces(:, 4:6));
totalM = [transp(forces(:, 7:9)) cross(totalR, totalF)];

%  output array that holds the information for the 6 equations
sysEquations = zeros(6, numReactions * numForces + 1);

% ---totals
sysEquations(1, end) = -sum(totalF(1, :));
sysEquations(2, end) = -sum(totalF(2, :));
sysEquations(3, end) = -sum(totalF(3, :));

sysEquations(4, end) = -sum(totalM(1, :));
sysEquations(5, end) = -sum(totalM(2, :));
sysEquations(6, end) = -sum(totalM(3, :));

% ---assumptions
if related
    [sysEquations, reactions] = relations(sysEquations, reactions);
end
if scenario(1, 1)
    for i = 1:size(scenario, 1)
        sysEquations = specialCases(sysEquations, scenario(i, :));
    end
end

% ---reaction forces
for i = 1:numReactions
    n = (i-1)*numForces; 
    % input the simple values (forces and moments)
    sysEquations(1, n+1) = reactions(i, 4);
    sysEquations(2, n+2) = reactions(i, 5);
    sysEquations(3, n+3) = reactions(i, 6);
    sysEquations(4, n+4) = reactions(i, 7);
    sysEquations(5, n+5) = reactions(i, 8);
    sysEquations(6, n+6) = reactions(i, 9);
    
    % find the moments generated by the reaction forces
    sysEquations(4, n+3) = -(reactions(i, 2) - about(2)) * reactions(i, 6);
    sysEquations(4, n+2) = -(reactions(i, 3) - about(3)) * reactions(i, 5);
    sysEquations(5, n+3) = -(reactions(i, 1) - about(1)) * reactions(i, 6);
    sysEquations(5, n+1) = -(reactions(i, 3) - about(3)) * reactions(i, 4);
    sysEquations(6, n+2) = -(reactions(i, 1) - about(1)) * reactions(i, 5);
    sysEquations(6, n+1) = -(reactions(i, 2) - about(2)) * reactions(i, 4);
end
end

%--------------------------------------------------
%   RELATIONS
%--------------------------------------------------

function [sysEquations, reactions] = relations(sysEquations, reactions)
%RELATIONS Changes the system of equations and reactions based on reactions
%   [sysEqs, reacts] = RELATIONS(sysEqs, reacts) returns modified arrays
%   based on the values found in the reactions array.
%   Works by pairing up any same numbers in the reactions array (excluding
%   1) then adds rows to the system of equations to relate them.

% setting up useful values used
numReactions = size(reactions, 1);
numForces    = 6; % constant for the number of forces (Fxyz and Mxyz)

% ---add related forces equations
extraEquations = zeros(numReactions * numForces + 1);
line = 1;
pairs = max(max(abs(reactions(:, 4:9)))); % find highest combination

for n = 2:pairs
    [i, j] = find(abs(reactions(:, 4:9)) == n);
    count = size(i, 1);
     
    % loop for number of same variables
    for m = 2:count
        % check for if they should be equal and oposite
        inverse = reactions(i(m-1), j(m-1)+3)/reactions(i(m), j(m)+3);
        extraEquations(line,(i(m-1)-1)*6+j(m-1)) = 1;
        extraEquations(line,(i(m)-1)*6+j(m)) = -1*inverse;
        line = line + 1;
    end

    % change reactions
    for k = 1:count
        reactions(i(k), j(k) + 3) = 1; 
    end
end
    
% remove the unused lines and add to the system of equations
extraEquations( ~any(extraEquations,2), : ) = [];
sysEquations = [sysEquations; extraEquations];
end

%--------------------------------------------------
%   SPECIAL CASES
%--------------------------------------------------

function sysEquations = specialCases(sysEquations, scenario)
%SPECIALCASES Adds specific assumptions to solve system
%   sysEqs = SPECIALCASE(sysEqs, scenario) will return the system of
%   equations with any assumptions that need to be made in order to
%   solve for the reactions. These are not generic and come from analysis
%   of the components.

switch scenario(1)
    % case 1 is for the angle between the gondola sections
    case 1
        % convert the angle
        a = scenario(2)*pi/180;
        
        % add blank rows to the system of equations
        columns = size(sysEquations(1, :));
        sysEquations = [sysEquations; zeros(5, columns(2))];
        
        % add the assumptions that Fx + tan(a)Fz = 0 for two reactions
        sysEquations(end-4, 1:3)   = [ 1        0  tan(a)    ];
        sysEquations(end-3, 7:9)   = [ 1        0  tan(a)    ];
        sysEquations(end-2, 1:3)   = [ 0       -1  1/cos(a)  ];
        sysEquations(end-1, 7:9)   = [ 0        1  1/cos(a)  ];
        sysEquations(end,   25:27) = [ tan(a/2) 0 -1         ];
end
end